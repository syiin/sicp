(define (union-set set1 set2)
  (cond ((and (null? set1) (null? set2)) '())
         ((and (null? set1) (not (null? set2))) set2)
         ((and (not (null? set1)) (null? set2)) set1)
         (else (let ((x1 (car set1)) (x2 (car set2)))
                (cond ((= x1 x2)
                        (union-set (cdr set1) set2))
                      ((< x1 x2)
                        (cons x1 (union-set (cdr set1) set2)))
                      ((< x2 x1)
                        (cons x2 (union-set set1 (cdr set2)))))))))

(define set-1 '(1 2 3))
(define set-2 '(4 5 6))
(define set-3 '(3 6 9))

(union-set set-1 set-2)
(union-set set-1 set-3)
(union-set set-3 set-1)
