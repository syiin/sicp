(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (push item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?) 
                (set! rear-ptr new-pair)
                (set! front-ptr new-pair))
              (else 
                (set-cdr! rear-ptr new-pair)
                (set! rear-ptr new-pair)
                front-ptr))))
    (define (delete)
      (if (empty-queue?)
        '()
        (begin 
          (set! front-ptr (cdr front-ptr))
          front-ptr
          )))
    
    (define (pop)
      (let ((popee (car front-ptr)))
        (delete)
        popee))
    (define (print-queue)
      (newline)
      (display front-ptr)
    )

    (define (dispatch m) 
      (cond ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
            ((eq? m 'empty-queue?) (empty-queue?))
            ((eq? m 'delete) (delete))
            ((eq? m 'push) push)
            ((eq? m 'pop) (pop))
            ((eq? m 'print-queue) (print-queue))
      )
    )
    dispatch))

(define queue (make-queue))
((queue 'push) 'a)
((queue 'push) 'b)
((queue 'push) 'c)
((queue 'push) 'd)
(queue 'pop)
(queue 'print-queue)