(define (make-account amnt passwd)
  (let ((amount amnt)
        (password passwd))
  (lambda (p cmd) 
    (cond ((not (eq? p password)) (lambda (x) "Incorrect password" ))
          ((eq? cmd 'withdraw) (lambda (x) (begin (set! amount (- amount x)) amount)))
          ((eq? cmd 'deposit) (lambda (x) (begin (set! amount (+ amount x)) amount)))))))

(define (make-join acct passwd new-passwd) 
  (let ((second-password new-passwd))
  (define (is-password? p cmd) (or (equal? (acct p cmd) "Incorrect password") 
                                   (not (eq? second-password p))))
  (lambda (p cmd)
    (if (is-password? p cmd)
      (acct passwd cmd)
      (lambda (x) "Incorrect password")
    ))))

(define first-acct (make-account 100 'open-sesame))
(define joint-acct (make-join first-acct 'open-sesame 'rosebud))
((joint-acct 'open-sesame 'withdraw) 10)
((joint-acct 'rose-bud 'withdraw) 10)

((joint-acct 'open-sesame 'deposit) 10)
((joint-acct 'rose-bud 'deposit) 10)
